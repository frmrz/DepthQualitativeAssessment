import streamlit as st
import pandas as pd
import os
import json

# Title of the app
st.title("Qualitative Performance Assessment of EndoDAC and Depth Pro Models")

# Questionnaire description
st.write(
    "The video in the center shows a colonoscopy, while the two side videos (left and right) "
    "represent depth maps generated by two predictive models, where blue indicates deeper areas "
    "and red indicates shallower areas. \n"
    "Which of the two side videos (left or right) do you think best reflects reality in terms of accuracy in depth estimation?"
)

# First question: are you a clinician?
clinician = st.radio("Are you a clinician?", ["Yes", "No"])

# If you are a clinician, what level of experience?
experience_level = None
procedures_performed = None
if clinician == "Yes":
    experience_level = st.radio("What is your experience level?", ["Specializzando", "Resident", "Esperto"])
    procedures_performed = st.radio(
        "How many endoscopic procedures have you performed?",
        ["<50", "Between 50 and 100", ">100"]
    )

# Second question: name
name = st.text_input("Please enter your name")

# Parameter to set video width (adjust this value as needed)
VIDEO_WIDTH = 640

# Paths to the videos
video_paths = [
    "./videos/VideoColonoscopy3.mp4",
    "./videos/VideoColonoscopy4.mp4",
    "./videos/VideoColonoscopy5.mp4",
    "./videos/VideoColonoscopy6.mp4",
    "./videos/VideoColonoscopy7.mp4",
    "./videos/VideoColonoscopy8.mp4",
    "./videos/VideoColonoscopy9.mp4",
    "./videos/VideoColonoscopy10.mp4",
    "./videos/VideoColonoscopy11.mp4",
    "./videos/VideoColonoscopy12.mp4",
]

# Initialize session state
if "question_index" not in st.session_state:
    st.session_state["question_index"] = 0
if "responses" not in st.session_state:
    st.session_state["responses"] = [None] * len(video_paths)

# Proceed if the name is provided
if name:
    st.header("Questionnaire")
    question_index = st.session_state["question_index"]
    
    st.subheader(f"Question {question_index + 1}")
    st.video(video_paths[question_index], width=VIDEO_WIDTH)
    
    existing_response = st.session_state["responses"][question_index]
    default_index = 0 if existing_response == "Left" else 1 if existing_response == "Right" else None
    
    response = st.radio(
        "Which of the two side videos (left or right) do you think best reflects reality in terms of accuracy in depth estimation?", 
        ["Left", "Right"], 
        key=f"question_{question_index}",
        index=default_index
    )
    
    st.session_state["responses"][question_index] = response
    
    col1, col2 = st.columns(2)
    with col1:
        if st.button("Previous") and question_index > 0:
            st.session_state["question_index"] -= 1
            st.experimental_rerun()
    with col2:
        if st.button("Next") and question_index < len(video_paths) - 1:
            st.session_state["question_index"] += 1
            st.experimental_rerun()
    
    # Save answers when on the last question and the button is clicked
    if question_index == len(video_paths) - 1 and st.button("Submit Answers"):
        file_path = "responses.json"
        
        # Prepare the new data entry
        new_data = {
            "Name": name,
            "Clinician": clinician,
            "Experience Level": experience_level if clinician == "Yes" else None,
            "Procedures Performed": procedures_performed if clinician == "Yes" else None,
        }
        for i in range(len(video_paths)):
            new_data[f"Question {i+1}"] = st.session_state["responses"][i] if st.session_state["responses"][i] else "No Response"
        
        # Load existing responses if available
        if os.path.exists(file_path):
            with open(file_path, "r") as f:
                try:
                    responses = json.load(f)
                except json.JSONDecodeError:
                    responses = []
        else:
            responses = []
        
        responses.append(new_data)
        
        with open(file_path, "w") as f:
            json.dump(responses, f, indent=4)
        
        st.success("Your answers have been saved!")
        st.stop()
